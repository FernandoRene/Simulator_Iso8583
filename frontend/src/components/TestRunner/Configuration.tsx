import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Alert, AlertDescription } from '../ui/alert';
import {
  Settings,
  Network,
  Database,
  Shield,
  Save,
  TestTube,
  CheckCircle,
  AlertCircle
} from 'lucide-react';

interface ConfigSection {
  id: string;
  title: string;
  icon: React.ReactNode;
  description: string;
}

export const Configuration: React.FC = () => {
  const [activeSection, setActiveSection] = useState('switch');
  const [saving, setSaving] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [saveError, setSaveError] = useState<string | null>(null);

  // Estados para las configuraciones
  const [switchConfig, setSwitchConfig] = useState({
    host: '172.16.1.211',
    port: '5105',
    timeout: '30000',
    connectionPoolSize: '10',
    maxIdleTime: '300000',
    retryAttempts: '3',
    retryDelay: '1000'
  });

  const [fieldConfig, setFieldConfig] = useState({
    autoGenerateMissing: true,
    traceNumberStart: '1',
    traceNumberMax: '999999',
    autoGenerateDateTime: true,
    timezone: 'America/La_Paz',
    defaultCurrency: 'BOB',
    amountPrecision: '2'
  });

  const [monitoringConfig, setMonitoringConfig] = useState({
    enabled: true,
    metricsInterval: '60000',
    performanceTracking: true,
    logLevel: 'INFO',
    alertingEnabled: false,
    responseTimeThreshold: '5000',
    errorRateThreshold: '5'
  });

  const configSections: ConfigSection[] = [
    {
      id: 'switch',
      title: 'Configuración del Switch',
      icon: <Network className="w-5 h-5" />,
      description: 'Configurar conexión al autorizador ISO8583'
    },
    {
      id: 'fields',
      title: 'Generación de Campos',
      icon: <Database className="w-5 h-5" />,
      description: 'Configurar generación automática de campos'
    },
    {
      id: 'monitoring',
      title: 'Monitoreo y Logs',
      icon: <Shield className="w-5 h-5" />,
      description: 'Configurar monitoreo y sistema de logs'
    }
  ];

  const handleSave = async () => {
    setSaving(true);
    setSaveError(null);
    setSaveSuccess(false);

    try {
      // Simular guardado de configuración
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Aquí iría la llamada real a la API
      // await ApiService.updateConfiguration(activeSection, getCurrentConfig());

      setSaveSuccess(true);
      setTimeout(() => setSaveSuccess(false), 3000);
    } catch (error: any) {
      setSaveError(error.message || 'Error al guardar la configuración');
    } finally {
      setSaving(false);
    }
  };

  const testConnection = async () => {
    try {
      // Simular test de conexión
      await new Promise(resolve => setTimeout(resolve, 1500));
      alert('Conexión exitosa al autorizador');
    } catch (error) {
      alert('Error de conexión al autorizador');
    }
  };

  const renderSwitchConfig = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <Label htmlFor="host">Host del Autorizador</Label>
          <Input
            id="host"
            value={switchConfig.host}
            onChange={(e) => setSwitchConfig({...switchConfig, host: e.target.value})}
            placeholder="172.16.1.211"
          />
        </div>
        <div>
          <Label htmlFor="port">Puerto</Label>
          <Input
            id="port"
            type="number"
            value={switchConfig.port}
            onChange={(e) => setSwitchConfig({...switchConfig, port: e.target.value})}
            placeholder="5105"
          />
        </div>
        <div>
          <Label htmlFor="timeout">Timeout (ms)</Label>
          <Input
            id="timeout"
            type="number"
            value={switchConfig.timeout}
            onChange={(e) => setSwitchConfig({...switchConfig, timeout: e.target.value})}
            placeholder="30000"
          />
        </div>
        <div>
          <Label htmlFor="poolSize">Tamaño del Pool de Conexiones</Label>
          <Input
            id="poolSize"
            type="number"
            value={switchConfig.connectionPoolSize}
            onChange={(e) => setSwitchConfig({...switchConfig, connectionPoolSize: e.target.value})}
            placeholder="10"
          />
        </div>
        <div>
          <Label htmlFor="maxIdle">Tiempo Máximo Inactivo (ms)</Label>
          <Input
            id="maxIdle"
            type="number"
            value={switchConfig.maxIdleTime}
            onChange={(e) => setSwitchConfig({...switchConfig, maxIdleTime: e.target.value})}
            placeholder="300000"
          />
        </div>
        <div>
          <Label htmlFor="retryAttempts">Intentos de Reintento</Label>
          <Input
            id="retryAttempts"
            type="number"
            value={switchConfig.retryAttempts}
            onChange={(e) => setSwitchConfig({...switchConfig, retryAttempts: e.target.value})}
            placeholder="3"
          />
        </div>
      </div>

      <div className="flex space-x-3">
        <Button onClick={testConnection} variant="outline">
          <TestTube className="w-4 h-4 mr-2" />
          Probar Conexión
        </Button>
      </div>
    </div>
  );

  const renderFieldConfig = () => (
    <div className="space-y-6">
      <div className="flex items-center space-x-2">
        <input
          type="checkbox"
          id="autoGenerate"
          checked={fieldConfig.autoGenerateMissing}
          onChange={(e) => setFieldConfig({...fieldConfig, autoGenerateMissing: e.target.checked})}
          className="rounded"
        />
        <Label htmlFor="autoGenerate">Generar automáticamente campos faltantes</Label>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <Label htmlFor="traceStart">STAN Inicio</Label>
          <Input
            id="traceStart"
            type="number"
            value={fieldConfig.traceNumberStart}
            onChange={(e) => setFieldConfig({...fieldConfig, traceNumberStart: e.target.value})}
            placeholder="1"
          />
        </div>
        <div>
          <Label htmlFor="traceMax">STAN Máximo</Label>
          <Input
            id="traceMax"
            type="number"
            value={fieldConfig.traceNumberMax}
            onChange={(e) => setFieldConfig({...fieldConfig, traceNumberMax: e.target.value})}
            placeholder="999999"
          />
        </div>
        <div>
          <Label htmlFor="timezone">Zona Horaria</Label>
          <Input
            id="timezone"
            value={fieldConfig.timezone}
            onChange={(e) => setFieldConfig({...fieldConfig, timezone: e.target.value})}
            placeholder="America/La_Paz"
          />
        </div>
        <div>
          <Label htmlFor="currency">Moneda por Defecto</Label>
          <Input
            id="currency"
            value={fieldConfig.defaultCurrency}
            onChange={(e) => setFieldConfig({...fieldConfig, defaultCurrency: e.target.value})}
            placeholder="BOB"
          />
        </div>
      </div>

      <div className="flex items-center space-x-2">
        <input
          type="checkbox"
          id="autoDateTime"
          checked={fieldConfig.autoGenerateDateTime}
          onChange={(e) => setFieldConfig({...fieldConfig, autoGenerateDateTime: e.target.checked})}
          className="rounded"
        />
        <Label htmlFor="autoDateTime">Generar automáticamente fecha y hora</Label>
      </div>
    </div>
  );

  const renderMonitoringConfig = () => (
    <div className="space-y-6">
      <div className="flex items-center space-x-2">
        <input
          type="checkbox"
          id="monitoringEnabled"
          checked={monitoringConfig.enabled}
          onChange={(e) => setMonitoringConfig({...monitoringConfig, enabled: e.target.checked})}
          className="rounded"
        />
        <Label htmlFor="monitoringEnabled">Habilitar monitoreo</Label>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <Label htmlFor="metricsInterval">Intervalo de Métricas (ms)</Label>
          <Input
            id="metricsInterval"
            type="number"
            value={monitoringConfig.metricsInterval}
            onChange={(e) => setMonitoringConfig({...monitoringConfig, metricsInterval: e.target.value})}
            placeholder="60000"
          />
        </div>
        <div>
          <Label htmlFor="logLevel">Nivel de Log</Label>
          <select
            id="logLevel"
            value={monitoringConfig.logLevel}
            onChange={(e) => setMonitoringConfig({...monitoringConfig, logLevel: e.target.value})}
            className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm"
          >
            <option value="DEBUG">DEBUG</option>
            <option value="INFO">INFO</option>
            <option value="WARN">WARN</option>
            <option value="ERROR">ERROR</option>
          </select>
        </div>
        <div>
          <Label htmlFor="responseThreshold">Umbral Tiempo Respuesta (ms)</Label>
          <Input
            id="responseThreshold"
            type="number"
            value={monitoringConfig.responseTimeThreshold}
            onChange={(e) => setMonitoringConfig({...monitoringConfig, responseTimeThreshold: e.target.value})}
            placeholder="5000"
          />
        </div>
        <div>
          <Label htmlFor="errorThreshold">Umbral Tasa de Error (%)</Label>
          <Input
            id="errorThreshold"
            type="number"
            value={monitoringConfig.errorRateThreshold}
            onChange={(e) => setMonitoringConfig({...monitoringConfig, errorRateThreshold: e.target.value})}
            placeholder="5"
          />
        </div>
      </div>

      <div className="flex items-center space-x-2">
        <input
          type="checkbox"
          id="performanceTracking"
          checked={monitoringConfig.performanceTracking}
          onChange={(e) => setMonitoringConfig({...monitoringConfig, performanceTracking: e.target.checked})}
          className="rounded"
        />
        <Label htmlFor="performanceTracking">Seguimiento de performance</Label>
      </div>

      <div className="flex items-center space-x-2">
        <input
          type="checkbox"
          id="alertingEnabled"
          checked={monitoringConfig.alertingEnabled}
          onChange={(e) => setMonitoringConfig({...monitoringConfig, alertingEnabled: e.target.checked})}
          className="rounded"
        />
        <Label htmlFor="alertingEnabled">Habilitar alertas</Label>
      </div>
    </div>
  );

  const renderContent = () => {
    switch (activeSection) {
      case 'switch':
        return renderSwitchConfig();
      case 'fields':
        return renderFieldConfig();
      case 'monitoring':
        return renderMonitoringConfig();
      default:
        return renderSwitchConfig();
    }
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-gray-900">Configuración</h1>
        <Button
          onClick={handleSave}
          disabled={saving}
          className="flex items-center space-x-2"
        >
          {saving ? (
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
          ) : (
            <Save className="w-4 h-4" />
          )}
          <span>{saving ? 'Guardando...' : 'Guardar Cambios'}</span>
        </Button>
      </div>

      {/* Success/Error Messages */}
      {saveSuccess && (
        <Alert>
          <CheckCircle className="h-4 w-4" />
          <AlertDescription>
            Configuración guardada exitosamente
          </AlertDescription>
        </Alert>
      )}

      {saveError && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{saveError}</AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Navigation Sidebar */}
        <Card className="lg:col-span-1">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Settings className="w-5 h-5 mr-2" />
              Secciones
            </CardTitle>
          </CardHeader>
          <CardContent className="p-0">
            <nav className="space-y-1">
              {configSections.map((section) => (
                <button
                  key={section.id}
                  onClick={() => setActiveSection(section.id)}
                  className={`
                    w-full text-left px-4 py-3 flex items-start space-x-3 hover:bg-gray-50 transition-colors
                    ${activeSection === section.id ? 'bg-blue-50 border-r-2 border-blue-500 text-blue-700' : 'text-gray-700'}
                  `}
                >
                  <div className="flex-shrink-0 mt-0.5">
                    {section.icon}
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="font-medium text-sm">{section.title}</p>
                    <p className="text-xs text-gray-500 mt-1">{section.description}</p>
                  </div>
                </button>
              ))}
            </nav>
          </CardContent>
        </Card>

        {/* Configuration Content */}
        <Card className="lg:col-span-3">
          <CardHeader>
            <CardTitle>
              {configSections.find(s => s.id === activeSection)?.title}
            </CardTitle>
          </CardHeader>
          <CardContent>
            {renderContent()}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};